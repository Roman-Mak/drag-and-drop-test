{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["rows","columns","getRandomLocation","prevLocation","chestZone","location","Math","floor","random","length","i","includes","getChestZone","xIndex","yIndex","App","useState","objsLocations","setObjsLocations","useEffect","prev","console","log","className","onDragEnd","result","destination","droppableId","filter","el","source","map","index","r","style","display","c","objLocation","find","l","isDropDisabled","provided","droppableProps","ref","innerRef","border","width","height","backgroundColor","disableInteractiveElementBlocking","draggableId","indexOf","draggableProps","dragHandleProps","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAIMA,EAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACrDC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAExDC,EAAoB,SAApBA,EAAqBF,EAAgBC,EAAmBE,EAAwBC,GAGpF,IAFA,IAAMC,EAAQ,UAAMJ,EAAQK,KAAKC,MAAMD,KAAKE,SAAWP,EAAQQ,UAAjD,OAA4DT,EAAKM,KAAKC,MAAMD,KAAKE,SAAWR,EAAKS,UAEtGC,EAAI,EAAGA,EAAIP,EAAaM,OAAQC,IACvC,GAAKL,IAAaF,EAAaO,IAAON,EAAUO,SAASN,GACvD,OAAOH,EAAkBF,EAAMC,EAASE,EAAcC,GAG1D,OAAOC,GAGHO,EAAe,SAACZ,EAAgBC,GACpC,IAAMY,EAASP,KAAKC,MAAMD,KAAKE,SAAWR,EAAKS,QACzCK,EAASR,KAAKC,MAAMD,KAAKE,SAAWP,EAAQQ,QAElD,MAAO,CAAC,GAAD,OACFR,EAAQa,IADN,OACgBd,EAAKa,IADrB,UAEFZ,EAAQa,IAFN,OAEiC,MAAjBd,EAAKa,GAAkBb,EAAKa,EAAS,GAAKb,EAAKa,EAAS,IAFxE,UAGkB,MAApBZ,EAAQa,GAAkBb,EAAQa,EAAS,GAAKb,EAAQa,EAAS,IAH/D,OAGoEd,EAAKa,IAHzE,UAIkB,MAApBZ,EAAQa,GAAkBb,EAAQa,EAAS,GAAKb,EAAQa,EAAS,IAJ/D,OAIqF,MAAjBd,EAAKa,GAAkBb,EAAKa,EAAS,GAAKb,EAAKa,EAAS,MAmFtHE,MA7Ef,WAAgB,IAAD,EAC6BC,mBAAmB,IADhD,mBACNC,EADM,KACSC,EADT,OAEOF,mBAAmBJ,EAAaZ,EAAMC,IAAnDG,EAFM,oBA4Bb,OAPAe,qBAAU,WACR,IAAK,IAAIT,EAAI,EAAGA,GAxBA,EAwBkBA,IAChCQ,GAAiB,SAAAE,GAAI,4BAAQA,GAAR,CAAclB,EAAkBF,EAAMC,EAASmB,EAAMhB,QAE5EiB,QAAQC,IAAIV,EAAaZ,EAAMC,MAC9B,CAACG,IAGF,qBAAKmB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,6BAAKN,EAAcR,OAAS,gCAAkC,eAC9D,cAAC,IAAD,CAAiBe,UA5BvB,SAAyBC,GACvB,GAAKA,EAAOC,YAEZ,OAAItB,EAAUO,SAASc,EAAOC,YAAYC,aACjCT,EAAiBD,EAAcW,QAAO,SAAAC,GAAE,OAAIA,IAAOJ,EAAOK,OAAOH,qBAG1ET,GAAiB,SAAAE,GACf,OAAOA,EAAKW,KAAI,SAACF,EAAInB,GAInB,OAHIA,IAAMe,EAAOK,OAAOE,OAAUZ,EAAKT,SAASc,EAAOC,YAAYC,eACjEE,EAAKJ,EAAOC,YAAYC,aAEnBE,SAgBP,SACG7B,EAAK+B,KAAI,SAACE,GACT,OAAO,qBAAaC,MAAO,CAACC,QAAS,QAA9B,SACNlC,EAAQ8B,KAAI,SAAAK,GACX,IAAMC,EAAcpB,EAAcqB,MAAK,SAAAC,GAAC,OAAIA,IAAC,UAAOH,GAAP,OAAWH,MACxD,OAAO,cAAC,IAAD,CAA4BN,YAAW,UAAKS,GAAL,OAASH,GAAKO,iBAAkBH,EAAvE,SACN,SAACI,GAAD,OACC,gDAASA,EAASC,gBAAlB,IAAkCC,IAAKF,EAASG,SAAUV,MAAO,CAACW,OAAQ,YAAaC,MAAO,OAAQC,OAAQ,OAAQC,gBAAiB5C,EAAUO,SAAV,UAAsByB,GAAtB,OAA0BH,IAAO,QAAU,SAAlL,UACGI,GAAe,cAAC,IAAD,CAAWY,mCAAiC,EAACC,YAAW,UAAKjC,EAAckC,QAAQd,IAAgBL,MAAOf,EAAckC,QAAQd,GAAhI,SACX,SAACI,GAAD,OACC,yDAAKE,IAAKF,EAASG,UAAcH,EAASW,gBAAoBX,EAASY,iBAAvE,IAAwF9B,UAAU,eAGrGkB,EAASa,kBART,UAAmBlB,GAAnB,OAAuBH,QAHfA,cCpDdsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f1fa431c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport './App.css';\n\nconst rows = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\nconst columns = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];\n\nconst getRandomLocation = (rows: string[], columns: string[], prevLocation: string[], chestZone: string[]): string => {\n  const location = `${columns[Math.floor(Math.random() * columns.length)]}${rows[Math.floor(Math.random() * rows.length)]}`;\n\n  for (let i = 0; i < prevLocation.length; i++) {\n    if ((location === prevLocation[i]) || chestZone.includes(location)) {\n      return getRandomLocation(rows, columns, prevLocation, chestZone);\n    }\n  }\n  return location;\n}\n\nconst getChestZone = (rows: string[], columns: string[]) => {\n  const xIndex = Math.floor(Math.random() * rows.length);\n  const yIndex = Math.floor(Math.random() * columns.length);\n\n  return [\n    `${columns[yIndex]}${rows[xIndex]}`,\n    `${columns[yIndex]}${rows[xIndex] === '1' ? rows[xIndex + 1] : rows[xIndex - 1]}`,\n    `${columns[yIndex] === 'a' ? columns[yIndex + 1] : columns[yIndex - 1]}${rows[xIndex]}`,\n    `${columns[yIndex] === 'a' ? columns[yIndex + 1] : columns[yIndex - 1]}${rows[xIndex] === '1' ? rows[xIndex + 1] : rows[xIndex - 1]}`,\n  ];\n}\n\nconst objQuantity = 4;\n\nfunction App() {\n  const [objsLocations, setObjsLocations] = useState<string[]>([]);\n  const [chestZone] = useState<string[]>(getChestZone(rows, columns))\n\n  function handleOnDragEnd(result: any) {\n    if (!result.destination) return;\n\n    if (chestZone.includes(result.destination.droppableId)) {\n      return setObjsLocations(objsLocations.filter(el => el !== result.source.droppableId));\n    }\n\n    setObjsLocations(prev => {\n      return prev.map((el, i) => {\n        if (i === result.source.index && !prev.includes(result.destination.droppableId)) {\n          el = result.destination.droppableId\n        }\n        return el\n      })\n    })\n  }\n\n  useEffect(() => {\n    for (let i = 1; i <= objQuantity; i++) {\n      setObjsLocations(prev => [...prev, getRandomLocation(rows, columns, prev, chestZone)]);\n    }\n    console.log(getChestZone(rows, columns));\n  }, [chestZone])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>{objsLocations.length ? 'Collect all apples in the box' : 'Great job!'}</h1>\n        <DragDropContext onDragEnd={handleOnDragEnd}>\n          {rows.map((r) => {\n            return <div key={r} style={{display: 'flex'}}>\n            {columns.map(c => {\n              const objLocation = objsLocations.find(l => l ===`${c}${r}`);\n              return <Droppable key={`${c}${r}`} droppableId={`${c}${r}`} isDropDisabled={!!objLocation}>\n              {(provided) => (\n                <div {...provided.droppableProps} ref={provided.innerRef} style={{border: '1px solid', width: '30px', height: '30px', backgroundColor: chestZone.includes(`${c}${r}`) ? 'brown' : 'white'}}>\n                  {objLocation && <Draggable disableInteractiveElementBlocking draggableId={`${objsLocations.indexOf(objLocation)}`} index={objsLocations.indexOf(objLocation)}>\n                      {(provided) => (\n                        <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className=\"circle\"/>\n                      )}\n                    </Draggable>}\n                    {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          })}\n          </div>\n        })}\n          {/* <Droppable droppableId=\"characters\">\n            {(provided) => (\n              <ul className=\"characters\" {...provided.droppableProps} ref={provided.innerRef}>\n                {characters.map(({id, name }, index) => {\n                  return (\n                    <Draggable key={id} draggableId={id} index={index}>\n                      {(provided) => (\n                        <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                          <p>\n                            { name }\n                          </p>\n                        </li>\n                      )}\n                    </Draggable>\n                  );\n                })}\n              </ul>\n            )}\n          </Droppable> */}\n        </DragDropContext>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}